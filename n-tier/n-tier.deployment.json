{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "vmSku": {
      "type": "string",
      "defaultValue": "Standard_A1_v2",
      "metadata": {
        "description": "Size of VMs in the VM Scale Set."
      }
    },
    "windowsOSVersion": {
      "type": "string",
      "defaultValue": "2016-Datacenter",
      "allowedValues": [
        "2008-R2-SP1",
        "2012-Datacenter",
        "2012-R2-Datacenter",
        "2016-Datacenter",
        "2019-Datacenter"
      ],
      "metadata": {
        "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version. Allowed values: 2008-R2-SP1, 2012-Datacenter, 2012-R2-Datacenter & 2016-Datacenter, 2019-Datacenter."
      }
    },
    "vmssName": {
      "type": "string",
      "metadata": {
        "description": "String used as a base for naming resources. Must be 3-61 characters in length and globally unique across Azure. A hash is prepended to this string for some resources, and resource-specific information is appended."
      },
      "minLength": 3,
      "maxLength": 61
    },
    "instanceCount": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Number of VM instances (100 or less)."
      },
      "minValue": 1,
      "maxValue": 100
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "vmssadmin",
      "metadata": {
        "description": "Admin username on all VMs."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin password on all VMs."
      }
    },
    "repoLink": {
      "type": "string",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located. For example, if stored on a public GitHub repo, you'd use the following URI: https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/201-vmss-windows-webapp-dsc-autoscale/."
      },
      "defaultValue": "https://raw.githubusercontent.com/Adamoo/iis_website/master/"
    },
    "powershelldscZip": {
      "type": "string",
      "defaultValue": "DSC/IISInstall.ps1.zip",
      "metadata": {
        "description": "Location of the PowerShell DSC zip file relative to the URI specified in the _artifactsLocation, i.e. DSC/IISInstall.ps1.zip"
      }
    },
    "basicWebApp": {
      "type": "string",
      "defaultValue": "basicWebApp/basicWebApp.zip",
      "metadata": {
        "description": "Location of the  of the basicWebApp package zip file relative to the URI specified in repoLink, i.e. basicWebApp/baseASPWebApp.zip"
      }
    },
    "dscTagVersion": {
      "type": "string",
      "defaultValue": "1.0",
      "metadata": {
        "description": "Version number of the DSC deployment. Changing this value on subsequent deployments will trigger the extension to run."
      }
    },
    "subnetPrefix": {
      "type": "array",
      "defaultValue": [
        "10.0.0.0/24",
        "10.0.1.0/24"
      ]

    }
  },
  "variables": {
    "loopLenght": "[length(parameters('subnetPrefix'))]",
    "nameBase": "[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]",
    "longnameBase": "[toLower(variables('nameBase'))]",
    "trafficManagerName": "[concat(variables('nameBase'), 'tf')]",
    "endpointName": "[concat(variables('nameBase'), 'end')]",
    "publicIPAddressName": "[concat(variables('nameBase'), 'pip')]",
    "virtualNetworkName": "[concat(variables('nameBase'), 'vnet')]",
    "addressPrefix": "10.0.0.0/16",
    "loadBalancerName": "[concat(variables('nameBase'), 'lb')]",
    "natPoolName": "[concat(variables('nameBase'), 'natpool')]",
    "bePoolName": "[concat(variables('nameBase'), 'bepool')]",
    "natStartPort": 50000,
    "natEndPort": 50119,
    "natBackendPort": 3389,
    "nicName": "[concat(variables('nameBase'), 'nic')]",
    "ipConfigName": "[concat(variables('nameBase'), 'ipconfig')]",
    "osType": {
      "publisher": "MicrosoftWindowsServer",
      "offer": "WindowsServer",
      "sku": "[parameters('windowsOSVersion')]",
      "version": "latest"
    },
    "imageReference": "[variables('osType')]",
    "basicWebAppFullPath": "[uri(parameters('repoLink'), concat(parameters('basicWebApp')))]",
    "powershelldscZipFullPath": "[uri(parameters('repoLink'), concat(parameters('powershelldscZip')))]"
  },
  "resources": [
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-05-01",
      "name": "[concat(variables('publicIPAddressName'), copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "count": "[variables('loopLenght')]",
        "name": "piploop"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(variables('longnameBase'), copyIndex())]"
        }
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-05-01",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "copy": [
          {
            "name": "subnets",
            "count": "[length(parameters('subnetPrefix'))]",
            "input": {
              "name": "[concat('subnet-', copyIndex('subnets'))]",
              "properties": {
                "addressPrefix": "[parameters('subnetPrefix')[copyIndex('subnets')]]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "2020-05-01",
      "name": "[concat(variables('loadBalancerName'), copyIndex())]",
      "location": "[resourceGroup().location]",
      "dependsOn": [ "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('publicIPAddressName'),copyIndex()))]" ],
      "copy": {
        "count": "[variables('loopLenght')]",
        "name": "lbloop"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontEnd",
            "properties": {
              "publicIPAddress": {
                "id": "[concat(resourceId('Microsoft.Network/publicIPAddresses', concat(variables('publicIPAddressName'),copyIndex())))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[concat(variables('bePoolName'))]"
          }
        ],
        "inboundNatPools": [
          {
            "name": "[concat(variables('natPoolName'))]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat(variables('loadBalancerName'), copyIndex())),'/frontendIPConfigurations/loadBalancerFrontEnd')]"
              },
              "protocol": "Tcp",
              "frontendPortRangeStart": "[variables('natStartPort')]",
              "frontendPortRangeEnd": "[variables('natEndPort')]",
              "backendPort": "[variables('natBackendPort')]"
            }
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LoadBalanceRule",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat(variables('loadBalancerName'), copyIndex())),'/frontendIPConfigurations/loadBalancerFrontEnd')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat(variables('loadBalancerName'), copyIndex())),'/backendAddressPools/', variables('bePoolName'))]"
              },
              "protocol": "Tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat(variables('loadBalancerName'), copyIndex())),'/probes/tcpProbe')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "tcpProbe",
            "properties": {
              "protocol": "Tcp",
              "port": 80,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "apiVersion": "2019-12-01",
      "name": "[concat(variables('nameBase'), copyIndex())]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/loadBalancers/', concat(variables('loadBalancerName'),copyIndex()))]",
        "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "copy": {
        "count": "[variables('loopLenght')]",
        "name": "vmssloop"
      },
      "sku": {
        "name": "[parameters('vmSku')]",
        "tier": "Standard",
        "capacity": "[parameters('instanceCount')]"
      },
      "properties": {
        "overprovision": true,
        "upgradePolicy": {
          "mode": "Automatic"
        },
        "virtualMachineProfile": {
          "storageProfile": {
            "osDisk": {
              "caching": "ReadWrite",
              "createOption": "FromImage"
            },
            "imageReference": "[variables('imageReference')]"
          },
          "osProfile": {
            "computerNamePrefix": "[variables('nameBase')]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]"
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[variables('nicName')]",
                "properties": {
                  "primary": true,
                  "ipConfigurations": [
                    {
                      "name": "[variables('ipConfigName')]",
                      "properties": {
                        "subnet": {
                          "id": "[concat(resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName')), '/subnets/', concat('subnet-', copyIndex()))]"
                        },
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat(variables('loadBalancerName'), copyIndex())),'/backendAddressPools/', variables('bePoolName'))]"
                          }
                        ],
                        "loadBalancerInboundNatPools": [
                          {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat(variables('loadBalancerName'), copyIndex())),'/inboundNatPools/', variables('natPoolName'))]"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "extensionProfile": {
            "extensions": [
              {
                "name": "Microsoft.Powershell.DSC",
                "properties": {
                  "publisher": "Microsoft.Powershell",
                  "type": "DSC",
                  "typeHandlerVersion": "2.9",
                  "autoUpgradeMinorVersion": true,
                  "forceUpdateTag": "[parameters('dscTagVersion')]",
                  "settings": {
                    "configuration": {
                      "url": "[variables('powershelldscZipFullPath')]",
                      "script": "IISInstall.ps1",
                      "function": "InstallIIS"
                    },
                    "configurationArguments": {
                      "nodeName": "localhost",
                      "WebDeployPackagePath": "[variables('basicWebAppFullPath')]"
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    {
      "type": "Microsoft.Network/trafficManagerProfiles",
      "apiVersion": "2018-08-01",
      "name": "[variables('trafficManagerName')]",
      "location": "global",
      "properties": {
        "profileStatus": "Enabled",
        "trafficRoutingMethod": "Priority",
        "dnsConfig": {
          "relativeName": "[variables('trafficManagerName')]",
          "ttl": 60
        },
        "monitorConfig": {
          "profileMonitorStatus": "Online",
          "protocol": "HTTP",
          "port": 80,
          "path": "/",
          "intervalInSeconds": 30,
          "toleratedNumberOfFailures": 3,
          "timeoutInSeconds": 10
        },
        "trafficViewEnrollmentStatus": "Disabled",
        "maxReturn": 0
      }
    },
    {
      "apiVersion": "2017-05-01",
      "type": "Microsoft.Network/trafficManagerProfiles/azureEndpoints",
      "name": "[concat(variables('trafficManagerName'),'/',variables('endpointName'), copyIndex())]",
      "location": "global",
      "dependsOn": [
        "[resourceId('Microsoft.Network/trafficManagerProfiles/',variables('trafficManagerName'))]"
      ],
      "copy": {
        "name": "tmEndpointsCopy",
        "count": "[length(parameters('subnetPrefix'))]"
      },
      "properties": {
        "targetResourceId": "[concat(resourceId('Microsoft.Network/publicIPAddresses', concat(variables('publicIPAddressName'),copyIndex())))]",
        "endpointStatus": "Enabled",
        "endpointMonitorStatus": "Online",
        "target": "[concat(parameters('vmssName'),copyIndex(),'.uksouth.cloudapp.azure.com')]",
        "weight": 1,
        "priority": "[add(1, copyIndex())]",
        "endpointLocation": "[resourceGroup().location]"
      }
    }
  ]
}
